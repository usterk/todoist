name: Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Show directory structure
      run: |
        find . -type d | sort
    
    - name: Start API server for testing
      run: |
        # Start the API server in the background on port 8000
        PORT=8000 python -m app.main &
        
        # Store the process ID to terminate it later
        echo $! > api_server.pid
        
        # Wait for server to start by repeatedly checking the health endpoint
        echo "Waiting for API server to start..."
        attempt=1
        max_attempts=30
        
        until $(curl --output /dev/null --silent --fail http://localhost:8000/health); do
          if [ $attempt -ge $max_attempts ]; then
            echo "API server failed to start after $max_attempts attempts"
            exit 1
          fi
          
          echo "Attempt $attempt/$max_attempts: API server not ready yet, waiting 1 second..."
          attempt=$((attempt+1))
          sleep 1
        done
        
        echo "API server is up and running on port 8000!"
        curl -s http://localhost:8000/health | jq || echo "curl/jq failed but API is responding"
    
    - name: Run tests
      run: |
        python -m pytest -v
      env:
        PYTHONPATH: ${{ github.workspace }}
        # Dodanie CI=true zapewnia, że test_auth_local.py wykryje środowisko CI
        CI: 'true'
    
    - name: Generate coverage report
      run: |
        pytest --cov --cov-branch --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}
        CI: 'true'
    
    - name: Stop API server
      if: always()
      run: |
        if [ -f api_server.pid ]; then
          echo "Stopping API server..."
          kill $(cat api_server.pid) || true
          rm api_server.pid
        fi
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella
        verbose: true
